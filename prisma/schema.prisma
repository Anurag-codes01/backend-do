// SynergySphere Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedProjects    Project[]        @relation("ProjectOwner")
  teamMemberships  TeamMembership[]
  assignedTasks    Task[]
  messages         Message[]
  notifications    Notification[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner           User             @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  teamMemberships TeamMembership[]
  tasks           Task[]
  messageThreads  MessageThread[]

  @@map("projects")
}

model TeamMembership {
  id        String            @id @default(cuid())
  userId    String
  projectId String
  role      TeamMemberRole    @default(MEMBER)
  createdAt DateTime          @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("team_memberships")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  dueDate     DateTime?
  projectId   String
  assignedTo  String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  project      Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee     User?           @relation(fields: [assignedTo], references: [id])
  messageThreads MessageThread[]

  @@index([projectId])
  @@index([assignedTo])
  @@map("tasks")
}

model MessageThread {
  id        String   @id @default(cuid())
  projectId String
  taskId    String?
  createdAt DateTime @default(now())

  // Relations
  project  Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task     Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("message_threads")
}

model Message {
  id       String   @id @default(cuid())
  threadId String
  content  String
  authorId String
  createdAt DateTime @default(now())

  // Relations
  thread MessageThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  author User          @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([threadId])
  @@map("messages")
}

model Notification {
  id      String           @id @default(cuid())
  type    NotificationType
  message String
  userId  String
  read    Boolean          @default(false)
  createdAt DateTime       @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@map("notifications")
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum TeamMemberRole {
  MEMBER
  ADMIN
  OWNER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_UPDATED
  PROJECT_INVITATION
  DEADLINE_APPROACHING
  NEW_MESSAGE
}